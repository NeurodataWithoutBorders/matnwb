# Run MATLAB tests across multiple MATLAB versions and create a draft release

name: Prepare release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number in major.minor.patch format, i.e 2.8.0'
        required: true
        type: string

jobs:
  validate_version:
    runs-on: ubuntu-latest
    steps:
      - name: Check version format
        run: |
          version="${{ github.event.inputs.version }}"
          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Input for 'version' ('$version') is not in the expected major.minor.patch format."
            exit 1
          fi
          echo "Version '$version' is valid."

  run_tests:
    name: Run MATLAB tests (${{ matrix.matlab-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [validate_version]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-13]
        matlab-version: [R2021a, R2021b, R2022a, R2022b, R2023a, R2023b, R2024a, R2024b]
        include:
          - matlab-version: R2021a
            python-version: '3.9'
            skip-pynwb-compatibilty-test-for-tutorial: '1'
          - matlab-version: R2021b
            python-version: '3.9'
            skip-pynwb-compatibilty-test-for-tutorial: '1'
          - matlab-version: R2022a
            python-version: '3.9'
            skip-pynwb-compatibilty-test-for-tutorial: '0'
          - matlab-version: R2022b
            python-version: '3.9'
            skip-pynwb-compatibilty-test-for-tutorial: '0'
          - matlab-version: R2023a
            python-version: '3.10'
            skip-pynwb-compatibilty-test-for-tutorial: '0'
          - matlab-version: R2023b
            python-version: '3.10'
            skip-pynwb-compatibilty-test-for-tutorial: '0'
          - matlab-version: R2024a
            python-version: '3.11'
            skip-pynwb-compatibilty-test-for-tutorial: '0'
          - matlab-version: R2024b
            python-version: '3.11'
            skip-pynwb-compatibilty-test-for-tutorial: '0'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: |
          python -m pip install -U pip
          pip install -r +tests/requirements.txt
          python -m pip list

      - name: Configure python env (macOS, ubuntu)
        if: runner.os != 'Windows'
        run: |
          echo "HDF5_PLUGIN_PATH=$(python -c "import hdf5plugin; print(hdf5plugin.PLUGINS_PATH)")" >> "$GITHUB_ENV"

      - name: Configure python env (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $pluginPath = python -c "import hdf5plugin; print(hdf5plugin.PLUGINS_PATH)"
          Add-Content -Path $env:GITHUB_ENV -Value "HDF5_PLUGIN_PATH=$pluginPath"

      - name: Install MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          release: ${{ matrix.matlab-version }}

      - name: Run tests
        uses: matlab-actions/run-command@v2
        env:
          HDF5_PLUGIN_PATH: ${{ env.HDF5_PLUGIN_PATH }}
        with:
          command: |
            setenv("SKIP_PYNWB_COMPATIBILITY_TEST_FOR_TUTORIALS", ...
                num2str(${{ matrix.skip-pynwb-compatibilty-test-for-tutorial }}))
            pyenv("ExecutionMode", "OutOfProcess");
            results = assertSuccess(nwbtest('ReportOutputFolder', '.')); 
            assert(~isempty(results), 'No tests ran');

      - name: Upload JUnit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.matlab-version }}
          path: testResults.xml

  publish_junit:
    name: Publish JUnit test results
    runs-on: ubuntu-latest
    if: always()
    needs: [run_tests]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Retrieve result files
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: false

      - name: Publish test results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: '*/testResults.xml'

  update_version:
    name: Create new draft relase for given version
    runs-on: ubuntu-latest
    needs: [run_tests]
    steps:
      - name: Checkout repository using deploy key
        uses: actions/checkout@v4
        with:
          ref: refs/heads/main
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Update Contents.m file
        run: |
          # Read the template file
          template=$(cat .github/workflows/templates/contents_header_template.txt)
          
          # Get current date in DD-MMM-YYYY format
          date_string=$(date +"%d-%b-%Y")
          
          # Get current year
          year_number=$(date +"%Y")
          
          # Replace placeholders in template
          header="${template/\{\{version_number\}\}/${{ github.event.inputs.version }}}"
          header="${header/\{\{date_string\}\}/$date_string}"
          header="${header/\{\{year_number\}\}/$year_number}"
          
          # Extract the content after the header from the current Contents.m file
          content=$(awk '/^% -{10,}/{flag=1;next} flag{print}' Contents.m)
          
          # Combine new header with existing content
          echo "$header" > Contents.m
          echo "$content" >> Contents.m

      - name: Commit updated Contents.m file
        continue-on-error: true
        run: |
          git config user.name "${{ github.workflow }} by ${{ github.actor }}"
          git config user.email "<>"
          git add Contents.m
          git commit -m "Update version number in Contents.m"
          git fetch
          git push

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # Pinned to 3.12 because of pybadges dependencies

      - name: Generate tested with badge
        run: |
          pip install --upgrade setuptools
          pip install pybadges
          mkdir -p .github/badges/v${{ inputs.version }}
          python -c "
          from pybadges import badge
          with open('.github/badges/v${{ inputs.version }}/tested_with.svg', 'w') as f:
              f.write(badge(
                  left_text='tested with',
                  right_text='R2021a | R2021b | R2022a | R2022b | R2023a | R2023b | R2024 | R2024b',
                  right_color='green'
              ))
          "

      - name: Tag repository with version tag
        if: always()
        run: |
          git fetch

          git config user.name "${{ github.workflow }} by ${{ github.actor }}"
          git config user.email "<>"

          # Create the tag with a message
          git tag -a "${{ inputs.version }}" -m "Release ${{ inputs.version }}" 

          # Push the new tag to the remote repository
          git push origin "${{ inputs.version }}"
      
      # Commit the SVG for the MATLAB releases test badge to gh-badges branch
      - name: Checkout gh-badges branch
        uses: actions/checkout@v4
        with:
          ref: gh-badges
          path: gh-badges

      - name: Push to gh-badges
        run: |
          mkdir -p gh-badges/.github/badges/v${{ inputs.version }}
          cp .github/badges/v${{ inputs.version }}/tested_with.svg gh-badges/.github/badges/v${{ inputs.version }}/tested_with.svg
          cd gh-badges

          git config user.name "${{ github.workflow }} by ${{ github.actor }}"
          git config user.email "<>"

          # Only proceed with commit and push if changes are detected
          if [[ $(git add .github/badges/* --dry-run | wc -l) -gt 0 ]]; then
            git add .github/badges/*
            git commit -m "Update 'tested_with' badge for release v${{ inputs.version }}"
            git push -f
          else
            echo "Nothing to commit"
          fi

      # Create the release
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          tag: ${{ inputs.version }}
          generateReleaseNotes: true
          body: |
            ![Tested On Platforms](https://raw.githubusercontent.com/NeurodataWithoutBorders/matnwb/refs/heads/gh-badges/.github/badges/tested_on.svg)
            ![MATLAB Versions Tested](https://raw.githubusercontent.com/NeurodataWithoutBorders/matnwb/refs/heads/gh-badges/.github/badges/v${{ inputs.version }}/tested_with.svg)
