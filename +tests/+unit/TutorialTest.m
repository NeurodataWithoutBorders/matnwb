classdef TutorialTest <  matlab.unittest.TestCase
% TutorialTest - Unit test for testing the matnwb tutorials.
%
%   This test will test most tutorial files (while skipping tutorials with 
%   dependencies) If the tutorial creates an nwb file, the test will also try 
%   to open this with pynwb.
%   
%   Note: 
%       - Requires MATLAB XXXX to run py.* commands.
%       - pynwb must be installed in the python environment returned by
%         pyenv()


    properties
        MatNwbDirectory
    end

    properties (TestParameter)
        % TutorialFile - A cell array where each cell is the name of a
        % tutorial file. testTutorial will run on each file individually
        tutorialFile = listTutorialFiles();
    end

    properties (Constant)
        SkippedTutorials = {...
            'basicUsage.mlx', ...  % depends on external data
            'convertTrials.m', ... % depends on basicUsage output
            'formatStruct.m', ...  % Actually a utility script, not a tutorial
            'read_demo.mlx'};      % depends on external data
    end


    methods (TestClassSetup)
        function setupClass(testCase)
            % Get the root path of the matnwb repository
            rootPath = getMatNwbRootDirectory();
            tutorialsFolder = fullfile(rootPath, 'tutorials');
            
            testCase.MatNwbDirectory = rootPath;

            % Use a fixture to add the folder to the search path
            testCase.applyFixture(matlab.unittest.fixtures.PathFixture(rootPath));
            testCase.applyFixture(matlab.unittest.fixtures.PathFixture(tutorialsFolder));
            

            %testCase.applyFixture(matlab.unittest.fixtures.WorkingFolderFixture);
            %generateCore('savedir', '.');
        end
    end

    methods (TestMethodSetup)
        function setupMethod(testCase)
            testCase.applyFixture(matlab.unittest.fixtures.WorkingFolderFixture);
            generateCore('savedir', '.');
        end
    end
    
    methods (Test)
    
        function testTutorial(testCase, tutorialFile) %#ok<INUSD>
            evalc( 'run(tutorialFile)' ); % Run tutorial and suppress output

            testCase.testReadTutorialNwbFileWithPynwb()
        end
    end

    methods 
        function testReadTutorialNwbFileWithPynwb(testCase)

            % Retrieve all files generated by tutorial
            nwbListing = dir('*.nwb');
            
            for i = 1:numel(nwbListing)
            
                try
                    io = py.pynwb.NWBHDF5IO(nwbListing(i).name);
                    nwbObject = io.read();
                    testCase.verifyNotEmpty(nwbObject, 'The NWB file should not be empty.');
                    io.close()
                catch ME
                    error(ME.message)
                    %testCase.verifyFail(sprintf('Failed to read file %s with error: %s', nwbListing(i).name, ME.message));
                end
            end
        end
    end
    
end

function tutorialNames = listTutorialFiles()
% listTutorialFiles - List names of all tutorial files (exclude skipped files)
    rootPath = getMatNwbRootDirectory();
    L = dir(fullfile(rootPath, 'tutorials'));
    L( [L.isdir] ) = []; % Ignore folders
    tutorialNames = setdiff({L.name}, tests.unit.TutorialTestt.SkippedTutorials);
end

function folderPath = getMatNwbRootDirectory()
    folderPath = fileparts(fileparts(fileparts(mfilename('fullpath'))));
end
