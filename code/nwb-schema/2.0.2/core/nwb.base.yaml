datasets:
- doc: An abstract data type for a dataset
  neurodata_type_def: NWBData
  attributes:
  - name: help
    doc: Short description of what this type of Interface contains.
    dtype: text
- doc: Pointers that index data values
  neurodata_type_inc: NWBData
  neurodata_type_def: Index
  attributes:
  - name: help
    doc: a help string
    dtype: text
    value: indexes into a list of values for a list of elements
  - name: target
    doc: the target dataset that this index applies to
    dtype:
      target_type: NWBData
      reftype: object
- doc: Data values indexed by pointer
  neurodata_type_inc: NWBData
  neurodata_type_def: VectorData
  attributes:
  - name: help
    doc: a help string
    dtype: text
    value: Values for a list of elements
  - name: description
    doc: A short description of what these vectors are
    dtype: text
- doc: Pointers that index data values
  neurodata_type_inc: Index
  neurodata_type_def: VectorIndex
  attributes:
  - name: target
    doc: the target dataset that this index applies to
    dtype:
      target_type: VectorData
      reftype: object
  - name: help
    doc: a help string
    dtype: text
    value: indexes into a list of values for a list of elements
- shape:
  - null
  dims:
  - num_elements
  dtype: int
  doc: a unique identifier for each element
  default_name: element_id
  neurodata_type_inc: NWBData
  neurodata_type_def: ElementIdentifiers
  attributes:
  - name: help
    doc: a help string
    dtype: text
    value: unique identifiers for a list of elements
- dtype: int
  doc: a region/index into a DynamicTable
  neurodata_type_inc: VectorData
  neurodata_type_def: DynamicTableRegion
  attributes:
  - name: help
    doc: value is 'a subset (i.e. slice or region) of a DynamicTable'
    dtype: text
    value: a subset (i.e. slice or region) of a DynamicTable
  - name: table
    doc: a reference to the DynamicTable this region applies to
    dtype:
      target_type: DynamicTable
      reftype: object
  - name: description
    doc: Description of what this table region points to
    dtype: text
- shape:
  - - null
    - null
  - - null
    - null
    - 3
  - - null
    - null
    - 4
  dims:
  - - num_x
    - num_y
  - - num_x
    - num_y
    - "(r, g, b)"
  - - num_x
    - num_y
    - "(r, g, b, a)"
  doc: Image base type.
  neurodata_type_inc: NWBData
  neurodata_type_def: Image
  attributes:
  - name: help
    doc: base image (use GrayscaleImage, RGBImage, RGBAImage, etc.)
    dtype: text
  - name: resolution
    doc: pixels / cm
    required: false
    dtype: float
  - name: description
    doc: description of image
    required: false
    dtype: text
groups:
- doc: An abstract data type for a generic container storing collections of data and
    metadata. Base type for all data and metadata containers.
  neurodata_type_def: NWBContainer
  attributes:
  - name: help
    doc: Short description of what this type of NWBContainer contains.
    dtype: text
- doc: An abstract data type for a generic container storing collections of data,
    as opposed to metadata.
  neurodata_type_inc: NWBContainer
  neurodata_type_def: NWBDataInterface
  attributes:
  - name: help
    doc: Short description of what this type of NWBContainer contains.
    dtype: text
- groups:
  - name: sync
    doc: 'Lab specific time and sync information as provided directly from hardware
      devices and that is necessary for aligning all acquired time information to
      a common timebase. The timestamp array stores time in the common timebase. COMMENT:
      This group will usually only be populated in TimeSeries that are stored external
      to the NWB file, in files storing raw data. Once timestamp data is calculated,
      the contents of ''sync'' are mostly for archival purposes.'
    quantity: "?"
  datasets:
  - shape:
    - null
    dims:
    - num_times
    dtype: uint8
    name: control
    doc: 'Numerical labels that apply to each element in data[]. COMMENT: Optional
      field. If present, the control array should have the same number of elements
      as data[].'
    quantity: "?"
  - shape:
    - null
    dims:
    - num_control_values
    dtype: text
    name: control_description
    doc: 'Description of each control value. COMMENT: Array length should be as long
      as the highest number in control minus one, generating an zero-based indexed
      array for control values.'
    quantity: "?"
  - shape:
    - - null
    - - null
      - null
    - - null
      - null
      - null
    - - null
      - null
      - null
      - null
    dims:
    - - num_times
    - - num_times
      - num_DIM2
    - - num_times
      - num_DIM2
      - num_DIM3
    - - num_times
      - num_DIM2
      - num_DIM3
      - num_DIM4
    name: data
    doc: 'Data values. Can also store binary data (eg, image frames) COMMENT: This
      field may be a link to data stored in an external file, especially in the case
      of raw data.'
    attributes:
    - name: conversion
      doc: Scalar to multiply each element in data to convert it to the specified
        unit
      required: false
      dtype: float32
      default_value: 1
    - name: resolution
      doc: 'Smallest meaningful difference between values in data, stored in the specified
        by unit. COMMENT: E.g., the change in value of the least significant bit,
        or a larger number if signal noise is known to be present. If unknown, use
        -1.0'
      required: false
      dtype: float32
      default_value: 0
    - name: unit
      doc: 'The base unit of measure used to store data. This should be in the SI
        unit. COMMENT: This is the SI unit (when appropriate) of the stored data,
        such as Volts. If the actual data is stored in millivolts, the field ''conversion''
        below describes how to convert the data to the specified SI unit.'
      dtype: text
  - dtype: float64
    name: starting_time
    doc: 'The timestamp of the first sample. COMMENT: When timestamps are uniformly
      spaced, the timestamp of the first sample can be specified and all subsequent
      ones calculated from the sampling rate.'
    quantity: "?"
    attributes:
    - name: rate
      doc: 'Sampling rate, in Hz COMMENT: Rate information is stored in Hz'
      dtype: float32
    - name: unit
      doc: Value is 'Seconds'
      dtype: text
      value: Seconds
  - shape:
    - null
    dims:
    - num_times
    dtype: float64
    name: timestamps
    doc: 'Timestamps for samples stored in data.COMMENT: Timestamps here have all
      been corrected to the common experiment master-clock. Time is stored as seconds
      and all timestamps are relative to experiment start time.'
    quantity: "?"
    attributes:
    - name: interval
      doc: Value is '1'
      dtype: int32
      value: 1
    - name: unit
      doc: Value is 'Seconds'
      dtype: text
      value: Seconds
  doc: General purpose time series.
  neurodata_type_inc: NWBDataInterface
  neurodata_type_def: TimeSeries
  attributes:
  - name: comments
    doc: Human-readable comments about the TimeSeries. This second descriptive field
      can be used to store additional information, or descriptive information if the
      primary description field is populated with a computer-readable string.
    required: false
    dtype: text
    default_value: no comments
  - name: description
    doc: Description of TimeSeries
    required: false
    dtype: text
    default_value: no description
  - name: help
    doc: Value is 'General time series object'
    dtype: text
    value: General time series object
- groups:
  - doc: Interface objects containing data output from processing steps
    quantity: "*"
    neurodata_type_inc: NWBDataInterface
  doc: Module.  Name should be descriptive. Stores a collection of related data organized
    by contained interfaces.  Each interface is a contract specifying content related
    to a particular type of data.
  neurodata_type_inc: NWBContainer
  neurodata_type_def: ProcessingModule
  attributes:
  - name: description
    doc: Description of Module
    dtype: text
  - name: help
    doc: Value is 'A collection of analysis outputs from processing of data'
    dtype: text
    value: A collection of analysis outputs from processing of data
- datasets:
  - doc: Images stored in this NWBDataInterface
    quantity: "+"
    neurodata_type_inc: Image
  doc: A NWBDataInterface for storing images that have some relationship
  default_name: Images
  neurodata_type_inc: NWBDataInterface
  neurodata_type_def: Images
  attributes:
  - name: description
    doc: Description of images in this container
    dtype: text
  - name: help
    doc: Value is 'A collection of images that have some meaningful relationship'
    dtype: text
    value: A collection of images that have some meaningful relationship
- datasets:
  - shape:
    - null
    dims:
    - num_rows
    dtype: int
    name: id
    doc: The unique identifier for the rows in this dynamic table
    neurodata_type_inc: ElementIdentifiers
  - doc: The vector columns in this dynamic table
    quantity: "*"
    neurodata_type_inc: VectorData
  - doc: The indices for the vector columns in this dynamic table
    quantity: "*"
    neurodata_type_inc: VectorIndex
  doc: A group containing multiple datasets that are aligned on the first dimension
    (Currently, this requirement if left up to APIs to check and enforce). Apart from
    a column that contains unique identifiers for each row there are no other required
    datasets. Users are free to add any number of VectorData objects here. Table functionality
    is already supported through compound types, which is analogous to storing an
    array-of-structs. DynamicTable can be thought of as a struct-of-arrays. This provides
    an alternative structure to choose from when optimizing storage for anticipated
    access patterns. Additionally, this type provides a way of creating a table without
    having to define a compound type up front. Although this convenience may be attractive,
    users should think carefully about how data will be accessed. DynamicTable is
    more appropriate for column-centric access, whereas a dataset with a compound
    type would be more appropriate for row-centric access. Finally, data size should
    also be taken into account. For small tables, performance loss may be an acceptable
    trade-off for the flexibility of a DynamicTable. For example, DynamicTable was
    originally developed for storing trial data and spike unit metadata. Both of these
    use cases are expected to produce relatively small tables, so the spatial locality
    of multiple datasets present in a DynamicTable is not expected to have a significant
    performance impact. Additionally, requirements of trial and unit metadata tables
    are sufficiently diverse that performance implications can be overlooked in favor
    of usability.
  neurodata_type_inc: NWBDataInterface
  neurodata_type_def: DynamicTable
  attributes:
  - name: help
    doc: Value is 'A column-centric table'
    dtype: text
    value: A column-centric table
  - name: colnames
    doc: The names of the columns in this table. This should be used to specifying
      an order to the columns
    dtype: ascii
    shape:
    - null
    dims:
    - num_columns
  - name: description
    doc: Description of what is in this dynamic table
    dtype: text
